@{
    ViewData["Title"] = "New dashboard";
    Layout = null;
}



<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="~/css/Dscss/demo.css">
    <script src="~/js/Dsjs/gridstack-all.js"></script>
    <link rel="stylesheet" href="~/css/Dscss/gridstack-extra.min.css" />

</head>
<body>


  <div class="container-fluid">
  <div class="sidebar" style="height:50px">
      <div class="grid-stack-item">
        <div class="grid-stack-item-content">Add </div>
      </div>
      <div class="grid-stack-item" gs-w="2" gs-h="1" >
        <div class="grid-stack-item-content">Shazz</div>
      </div>
    </div>
    
    <a onClick="saveGrid()" class="btn btn-primary" href="#">Save</a>
    <a onClick="loadGrid()" class="btn btn-primary" href="#">Load</a>
    <a onClick="saveFullGrid()" class="btn btn-primary" href="#">Save Full</a>
    <a onClick="loadFullGrid()" class="btn btn-primary" href="#">Load Full</a>
    <a onClick="clearGrid()" class="btn btn-primary" href="#">Clear</a>
      <a onClick="addWidget()" class="btn btn-primary" href="#">Add Widget</a>
    <br/><br/>
     <div>
      <label>Choose re-layout:</label>
      <select onchange="setLayout(this.value)">
        <option value="list">list</option>
        <option value="compact">compact</option>
        <option value="moveScale">move + scale</option>
        <option value="move">move</option>
        <option value="scale">scale</option>
        <option value="none">none</option>
        <option value="custom">custom</option>
      </select>
    </div>
    <div>
      load:
      <a onClick="grid.removeAll().load(list)" class="btn btn-primary" href="#">list</a>
      <a onClick="grid.removeAll().load(test1)" class="btn btn-primary" href="#">case 1</a>
      <a onClick="random()" class="btn btn-primary" href="#">random</a>
      <a onClick="addWidget()" class="btn btn-primary" href="#">Add Widget</a>
      column:
      <a onClick="setOneColumn(false)" class="btn btn-primary" href="#">1</a>
      <a onClick="setOneColumn(true)" class="btn btn-primary" href="#">1 DOM</a>
      <a onClick="column(2)" class="btn btn-primary" href="#">2</a>
      <a onClick="column(3)" class="btn btn-primary" href="#">3</a>
      <a onClick="column(4)" class="btn btn-primary" href="#">4</a>
      <a onClick="column(6)" class="btn btn-primary" href="#">6</a>
      <a onClick="column(8)" class="btn btn-primary" href="#">8</a>
      <a onClick="column(10)" class="btn btn-primary" href="#">10</a>
      <a onClick="column(12)" class="btn btn-primary" href="#">12</a>
    </div>
    </div>
<br/>
  <a class="btn btn-primary" onClick="grid.setStatic(true)" href="#">Static</a>
      <a class="btn btn-primary" onclick="grid.setStatic(false)" id="float" href="#">Editable</a>
<br/>
    <div contentEditable="true">Editable Div</div>
    <div id="gridCont"><div class="grid-stack"></div></div>
    <hr/>
    <textarea id="saved-data" cols="100" rows="20" readonly="readonly"></textarea>

    <script src="~/js/Dsjs/events.js"></script>
  <script type="text/javascript">
    let grid = GridStack.init({
      minRow: 1, // don't let it collapse when empty
      cellHeight: '7rem',
      staticGrid: true,
      acceptWidgets: true,
      removable: true,
      draggable: { cancel: '.no-drag'} // example of additional custom elements to skip drag on
    });
      addEvents(grid);
    grid.on('added removed change', function(e, items) {
      if (!items) return;
      let str = '';
      items.forEach(function(item) { str += ' (x,y)=' + item.x + ',' + item.y; });
      console.log(e.type + ' ' + items.length + ' items:' + str );
    });

    let serializedData = [
      {x: 0, y: 0, w: 2, h: 2, id: '0'},
      {x: 3, y: 1, h: 3, id: '1', 
      content: "<button onclick=\"alert('clicked!')\">Press me</button><div>text area</div><div><textarea></textarea></div><div>Input Field</div><input type='text'><div contentEditable=\"true\">Editable Div</div><div class=\"no-drag\">no drag</div>"},
      {x: 4, y: 1, id: '2'},
      {x: 2, y: 3, w: 3, id: '3'},
      {x: 1, y: 3, id: '4'}
    ];
    serializedData.forEach((n, i) =>
      n.content = `<button onClick="removeWidget(this.parentElement.parentElement)">X</button><br> ${i}<br> ${n.content ? n.content : ''}`);
    let serializedFull;

    // 2.x method - just saving list of widgets with content (default)
    function loadGrid() {
      grid.load(serializedData, true); // update things
    }

    // 2.x method
    function saveGrid() {
      delete serializedFull;
      serializedData = grid.save();
      document.querySelector('#saved-data').value = JSON.stringify(serializedData, null, '  ');
    }

    // 3.1 full method saving the grid options + children (which is recursive for nested grids)
    function saveFullGrid() {
      serializedFull = grid.save(true, true);
      serializedData = serializedFull.children;
      document.querySelector('#saved-data').value = JSON.stringify(serializedFull, null, '  ');
    }

    // 3.1 full method to reload from scratch - delete the grid and add it back from JSON
    function loadFullGrid() {
      if (!serializedFull) return;
      grid.destroy(true); // nuke everything
      grid = GridStack.addGrid(document.querySelector('#gridCont'), serializedFull)
    }

    function clearGrid() {
      grid.removeAll();
    }

    function removeWidget(el) {
      // TEST removing from DOM first like Angular/React/Vue would do
      el.remove();
      grid.removeWidget(el, false);
    }

//add
    let count = 0;
   let layout = 'list';
function addWidget() {
      let n = {
        w: Math.round(1 + 3 ),
        h: Math.round(1 + 3 ),
        id:'div'+count,
        content: '<button onClick="grid.removeWidget(this.parentNode.parentNode)">X</button><br>' + count++,
      };
      grid.addWidget(n);
    };



 function column(n) {
      grid.column(n, layout);
      text.innerHTML = n;
    }



//SETTING

    function random() {
      grid.removeAll();
      count = 0;
      for (i=0; i<8; i++) addWidget(true);
    }

 function setOneColumn(dom) {
      if (grid.opts.column === 1 && grid.opts.oneColumnModeDomSort !== dom) {
        column(12); // go ack to 12 before going to new column1 version
      }
      grid.opts.oneColumnModeDomSort = dom;
      grid.column(1, layout);
      text.innerHTML = dom ? '1 DOM' : '1';
    }
    // dummy test method that moves items to the right each new layout... grid engine will validate those values (can't be neg or out of bounds) anyway...
    function columnLayout(column, oldColumn, nodes, oldNodes) {
      oldNodes.forEach(n => {
        n.x = n.x + 1;
        nodes.push(n);
      });
      oldNodes.length = 0;
    }
    function setLayout(name) {
      layout = name === 'custom' ? this.columnLayout : name;
    }

    GridStack.setupDragIn('.sidebar .grid-stack-item', { appendTo: 'body', helper: 'clone' });
    loadGrid();
  </script>
</body>
</html>

