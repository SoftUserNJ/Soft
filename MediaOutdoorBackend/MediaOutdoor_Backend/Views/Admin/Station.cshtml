@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = "Station";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="content ListPage pt-1">
    <div class="page-header">
        <div class="page-title">
            <h4>@Localizer["StationManagement"]</h4>
            <h6>@Localizer["Add/UpdateStation"]</h6>
        </div>
        <div class="page-btn">
            <div class="wordset newwordset">
                <ul>
                    <li>
                        <a data-bs-toggle="tooltip" data-bs-placement="top" title="Word" id="convertWord">
                            <i class="far fa-file-word" style="color: #000000; font-size:21px;"></i>
                        </a>
                    </li>
                    <li>
                        <a data-bs-toggle="tooltip" data-bs-placement="top" title="PDF" id="pdfPrint">
                            <i class="far fa-file-pdf" style="color: #000000; font-size:21px;"></i>
                        </a>
                    </li>
                    <li>
                        <a data-bs-toggle="tooltip" data-bs-placement="top" title="Excel" id="convertExcel">
                            <i class="far fa-file-excel" style="color: #000000; font-size:21px;"></i>
                        </a>
                    </li>
                    <li>
                        <a data-bs-toggle="tooltip" data-bs-placement="top" title="CSV" id="convertCsv">
                            <i class="fa fa-file-csv" style="color: #000000; font-size:21px;"></i>
                        </a>
                    </li>
                    <li>
                        <a href="/Home/Index" role="button">
                            <i class="fas fa-times-circle fs-22" style="color: #000000;"></i>
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <div class="table-top table-topm">
                <div class="search-set">
                    <div class="search-path">
                        <a class="btn btn-filter" id="filter_search_rm">
                            <img src="~/assets/img/icons/filter.svg" alt="img">
                            <span><img src="~/assets/img/icons/closes.svg" alt="img"></span>
                        </a>
                    </div>
                    <div class="search-input">
                        <input type="search" id="txtSearch">
                    </div>
                </div>
                <div class="wordset">
                    <p href="javascript:void(0);" class="btn btn-addednew btnAdd ct-btns">
                        <img src="~/assets/img/icons/plus.svg" alt="img" class="me-1">@Localizer["AddNew"]
                    </p>
                </div>
            </div>

            <div class="table-responsive" style="height:395px;">
                <table class="table text-white table-hover" id="tbl-print">
                    <thead>
                        <tr>
                            <th class="ps-2"><input type="checkbox" checked class="printCheckBox notPrintCol" />Id</th>
                            <th class="pe-3"><input type="checkbox" checked class="printCheckBox notPrintCol" />Station</th>
                            <th class="pe-3"><input type="checkbox" checked class="printCheckBox notPrintCol" />@Localizer["Address1"]</th>
                            <th class="pe-3"><input type="checkbox" checked class="printCheckBox notPrintCol" />@Localizer["Address2"]</th>
                            <th class="pe-3"><input type="checkbox" checked class="printCheckBox notPrintCol" />@Localizer["Lat"]</th>
                            <th class="pe-3"><input type="checkbox" checked class="printCheckBox notPrintCol" />@Localizer["Long"]</th>
                            <th class="pe-3"><input type="checkbox" checked class="printCheckBox notPrintCol" />@Localizer["D-Passers"]</th>
                            <th class="text-center pe-3 last-th-sticky"><input type="checkbox" class="printCheckBox notPrintCol" hidden>@Localizer["Action"]</th>
                        </tr>
                    </thead>
                    <tbody id="stationsList">
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<div class="content AddPage pt-1">
    <div class="page-header">
        <div class="page-title">
            <h4>@Localizer["StationAdd"]</h4>
        </div>
        <div class="page-btn">
            <a href="javascript:void(0);" class="btn btn-added btnList ct-btns">
                <i class="fa me-2 fa-th-list" data-bs-toggle="tooltip" title="" data-bs-original-title="" aria-label="fa fa-th-list"></i> @Localizer["Stations"]
            </a>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-lg-8 col-md-8 col-sm-12">
                    <div class="row activeForm disabled">

                        <div class="col-lg-6 col-md-6 col-sm-12">
                            <div class="form-group">
                                <label>@Localizer["StationName"]</label>
                                <input type="text" class="" id="txtStationName" skinid="Enter Station Name...">
                                <input type="hidden" id="txtStationId">
                            </div>
                        </div>

                        <div class="col-lg-6 col-md-6 col-sm-12">
                            <div class="form-group">
                                <label>@Localizer["Address1"]</label>
                                <input type="text" class="" id="txtAddress1" skinid="">
                            </div>
                        </div>

                        <div class="col-lg-6 col-md-6 col-sm-12">
                            <div class="form-group">
                                <label>@Localizer["Address2"]</label>
                                <input type="text" class="" id="txtAddress2" skinid="">
                            </div>
                        </div>

                        <div class="col-lg-6 col-md-6 col-sm-12">
                            <div class="form-group">
                                <label>@Localizer["Lat"]</label>
                                <input type="text" class="" id="txtLat" skinid="Enter Latitude...">
                            </div>
                        </div>

                        <div class="col-lg-6 col-md-6 col-sm-12">
                            <div class="form-group">
                                <label>@Localizer["Long"]</label>
                                <input type="text" class="" id="txtLong" skinid="Enter Longitude...">
                            </div>
                        </div>

                       @* <div class="col-lg-4 col-md-4 col-sm-12">
                            <div class="form-group">
                                <label>@Localizer["Rate"]</label>
                                <input type="text" class="" id="txtRate" skinid="">
                            </div>
                        </div>*@

                        <div class="col-lg-4 col-md-4 col-sm-12">
                            <div class="form-group">
                                <label>@Localizer["Daily Passers"]</label>
                                <input type="text" class="" id="txtDailyPassers" skinid="">
                            </div>
                        </div>

                    </div>
                </div>
                <div class="col-lg-4 col-md-4 col-sm-12 activeForm disabled">
                    <div class="commom-img mb-2 mt-1">
                        <img src="" id="ImageUser" />
                    </div>
                    <div class="form-group">
                        <input class="form-control" type="file" id="userImg" accept="image/jpg, image/jpeg, image/png" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="mb-2">
                    <button class="btn btn-primary btn-sm ct-btns" id="btnNew">@Localizer["New"]</button>
                    <button class="btn btn-success btn-sm ct-btns" id="btnSave">@Localizer["Save"]</button>
                    <button class="btn btn-secondary btn-sm ct-btns" id="btnRefresh">@Localizer["Refresh"]</button>
                    <button class="btn btn-secondary btn-sm ct-btns" onclick="SaveScreenPosition()">@Localizer["Refresh"]</button>

                    <div class="col-lg-4 col-md-4 col-sm-12">
                        <div style="padding: 20px;">
                            <label>Screens</label>
                            <select class="form-control js-example-basic-single select2" id="drpGetScreens">
                            </select>
                        </div>
                    </div>
                </div>

                <div>
                    <div style="padding:20px;">
                        <input type="checkbox" id="chkarrow" /> Arrow
                        <input type="checkbox" id="chkscreen" /> Screen
                    </div>
                    <button class="btn btn-success btn-sm ct-btns" id="btnleft">@Localizer["Left"]</button>
                    <button class="btn btn-success btn-sm ct-btns" id="btnright">@Localizer["Right"]</button>
                    
                    <button class="btn btn-success btn-sm ct-btns" id="btnup">@Localizer["Up"]</button>
                    <button class="btn btn-success btn-sm ct-btns" id="btndown">@Localizer["Down"]</button>

                    <button class="btn btn-success btn-sm ct-btns" id="btnwidthinc">@Localizer["+W"]</button>
                    <button class="btn btn-success btn-sm ct-btns" id="btnwidthdec">@Localizer["-W"]</button>
                    <button class="btn btn-success btn-sm ct-btns" id="btnheightinc">@Localizer["+H"]</button>
                    <button class="btn btn-success btn-sm ct-btns" id="btnheightdec">@Localizer["-H"]</button>
                        <div style="float:right;"><button class="btn btn-success btn-sm ct-btns" id="btnposition">@Localizer["UpdateScreen"]</button></div>
                    
                    <input type="text" class="txtincrement" id="txtincrement" skinid="">
                </div>









            </div>
        </div>

        <div id="arrowDiv"></div>
        <div id="ScreenSelect">
            @* <img src="" id="ScreenSelectImage" /> *@

        </div>


        <div class="modal-body" id="stationPopup" style="height: 270px;width:870px;">
        </div>




    </div>
</div>


@section scripts{
    <script>
        var mapoverlay; // Declare a global variable to hold the map instance
        var screenIdsArray = [];
        $(function () {
            $(".AddPage").hide();
            GetStationsList();
            $("#btnRefresh").click();

            const $selectElement = $("#drpGetScreens");
            const $arrowContainer = $("#arrowDiv");

            $selectElement.change(function () {
                const selectedValue = $selectElement.val();

                if (selectedValue !== "0") {

                    if ($arrowContainer.find('[data-ScreenId="' + selectedValue + '"]').length === 0) {

        @* const $arrowIcon = $('<i  style="color:red;font-size:20px;cursor:grab;animation: bounce 0.7s infinite; " class="fas fa-arrow-down"></i>');
                        $arrowIcon.attr('data-ScreenId', selectedValue);
                        $arrowContainer.append($arrowIcon);
                        $arrowIcon.draggable(); *@
                            }
                }
            });

        })





        $("#btnwidthinc").click(function () {
            debugger
            var Increment = 5;
            if ($("#txtincrement").val() != "") {
                Increment = parseFloat($("#txtincrement").val());
            }
            const $selectElement = $("#drpGetScreens");
            const selectedValue = $selectElement.val();
            if (document.getElementById('chkscreen').checked) {
                var element = document.querySelector(`[screenRect="${selectedValue}"]`);
                var currentX = element.getAttribute('width');
                var decimalX = parseFloat(currentX);
                var newX = decimalX + Increment;
                element.setAttribute('width', newX);
            }



        });

        $("#btnwidthdec").click(function () {
            debugger
            var Increment = 5;
            if ($("#txtincrement").val() != "") {
                Increment = parseFloat($("#txtincrement").val());
            }
            const $selectElement = $("#drpGetScreens");
            const selectedValue = $selectElement.val();
            if (document.getElementById('chkscreen').checked) {
                var element = document.querySelector(`[screenRect="${selectedValue}"]`);
                var currentX = element.getAttribute('width');
                var decimalX = parseFloat(currentX);
                var newX = decimalX - Increment;
                element.setAttribute('width', newX);
            }
        });
        $("#btnheightinc").click(function () {
            debugger
            var Increment = 5;
            if ($("#txtincrement").val() != "") {
                Increment = parseFloat($("#txtincrement").val());
            }
            const $selectElement = $("#drpGetScreens");
            const selectedValue = $selectElement.val();
            if (document.getElementById('chkscreen').checked) {
                var element = document.querySelector(`[screenRect="${selectedValue}"]`);
                var currentX = element.getAttribute('height');
                var decimalX = parseFloat(currentX);
                var newX = decimalX + Increment;
                element.setAttribute('height', newX);
            }
        });
        $("#btnheightdec").click(function () {
            debugger
            var Increment = 5;
            if ($("#txtincrement").val() != "") {
                Increment = parseFloat($("#txtincrement").val());
            }
            const $selectElement = $("#drpGetScreens");
            const selectedValue = $selectElement.val();
            if (document.getElementById('chkscreen').checked) {
                var element = document.querySelector(`[screenRect="${selectedValue}"]`);
                var currentX = element.getAttribute('height');
                var decimalX = parseFloat(currentX);
                var newX = decimalX - Increment;
                element.setAttribute('height', newX);
            }
        });


        $("#btnright").click(function () {
            debugger


            var Increment = 5;
            if ($("#txtincrement").val() != "") {
                Increment = parseFloat($("#txtincrement").val());
            }
            const $selectElement = $("#drpGetScreens");
            const selectedValue = $selectElement.val();


            if (document.getElementById('chkarrow').checked) {


                var element = document.querySelector(`[arrowText="${selectedValue}"]`);
                var currentX = element.getAttribute('x');
                var decimalX = parseFloat(currentX);
                var newX = decimalX + Increment;
                element.setAttribute('x', newX);
            }


            if (document.getElementById('chkscreen').checked) {


                var element = document.querySelector(`[screenRect="${selectedValue}"]`);
                var currentX = element.getAttribute('x');
                var decimalX = parseFloat(currentX);
                var newX = decimalX + Increment;
                element.setAttribute('x', newX);
            }







        });

        $("#btnleft").click(function () {


            var Increment = 5;
            if ($("#txtincrement").val() != "") {
                Increment = parseFloat($("#txtincrement").val());
            }
            const $selectElement = $("#drpGetScreens");
            const selectedValue = $selectElement.val();



            if (document.getElementById('chkarrow').checked) {


                var element = document.querySelector(`[arrowText="${selectedValue}"]`);
                var currentX = element.getAttribute('x');
                var decimalX = parseFloat(currentX);
                var newX = decimalX - Increment;
                element.setAttribute('x', newX);
            }


            if (document.getElementById('chkscreen').checked) {


                var element = document.querySelector(`[screenRect="${selectedValue}"]`);
                var currentX = element.getAttribute('x');
                var decimalX = parseFloat(currentX);
                var newX = decimalX - Increment;
                element.setAttribute('x', newX);
            }



        });


        $("#btnup").click(function () {

            var Increment = 5;
            if ($("#txtincrement").val() != "") {
                Increment = parseFloat($("#txtincrement").val());
            }
            const $selectElement = $("#drpGetScreens");
            const selectedValue = $selectElement.val();





            if (document.getElementById('chkarrow').checked) {


                var element = document.querySelector(`[arrowText="${selectedValue}"]`);
                var currentX = element.getAttribute('y');
                var decimalX = parseFloat(currentX);
                var newX = decimalX - Increment;
                element.setAttribute('y', newX);
            }


            if (document.getElementById('chkscreen').checked) {


                var element = document.querySelector(`[screenRect="${selectedValue}"]`);
                var currentX = element.getAttribute('y');
                var decimalX = parseFloat(currentX);
                var newX = decimalX - Increment;
                element.setAttribute('y', newX);
            }






        });

        $("#btndown").click(function () {
            var Increment = 5;
            if ($("#txtincrement").val() != "") {
                Increment = parseFloat($("#txtincrement").val());
            }
            const $selectElement = $("#drpGetScreens");
            const selectedValue = $selectElement.val();





            if (document.getElementById('chkarrow').checked) {


                var element = document.querySelector(`[arrowText="${selectedValue}"]`);
                var currentX = element.getAttribute('y');
                var decimalX = parseFloat(currentX);
                var newX = decimalX + Increment;
                element.setAttribute('y', newX);
            }


            if (document.getElementById('chkscreen').checked) {


                var element = document.querySelector(`[screenRect="${selectedValue}"]`);
                var currentX = element.getAttribute('y');
                var decimalX = parseFloat(currentX);
                var newX = decimalX + Increment;
                element.setAttribute('y', newX);
            }







        });





        $("#btnposition").click(function () {
            debugger
            var positionsArray = [];


            const elementsWithArrowText = document.querySelectorAll('[arrowText]');
            elementsWithArrowText.forEach(element => {
                var obj = {};
                var id = element.getAttribute('arrowText');
                var elementscreen = document.querySelector(`[screenRect="${id}"]`);
                obj.id = id;
                obj.x = element.getAttribute('x');
                obj.y = element.getAttribute('y');
                obj.screenx = elementscreen.getAttribute('x');
                obj.screeny = elementscreen.getAttribute('y');
                obj.width = elementscreen.getAttribute('width');
                obj.height = elementscreen.getAttribute('height');
                // Push the object into the array
                positionsArray.push(obj);
            });
            var formData = JSON.stringify(positionsArray);

            console.log(formData);










            try {
                $.ajax({
                    type: "POST",
                    contentType: "application/json", // Correct content type for JSON data
                    url: "/Admin/SavePosition/",
                    data: formData,
                    success: function (data) {
                        if (data != false) {
                            toastr.success("Update Positions Successfully", "", { closeButton: !0, tapToDismiss: !1, ltl: o });

                        }
                        else {
                            toastr.error("Please Save Again", "", { closeButton: !0, tapToDismiss: !1, ltl: o });
                        }
                    },
                    error: function () {
                    }
                });
            }
            catch (err) {
                alert(err)
            }

        });


        $(".btnAdd").click(function () {
            $(".ListPage").hide();
            $(".AddPage").show();
            $("#txtStationId").val("");
            $("#btnRefresh").click();
        });

        $(".btnList").click(function () {
            $(".ListPage").show();
            $(".AddPage").hide();
        });

        //====================== Users ========================\\

        function GetStationsList() {
            try {
                $.ajax({
                    type: "Get",
                    contentType: "application/x-www-form-urlencoded; charset=UTF-8",
                    url: "/Admin/GetStation/",
                    async: false,
                    dataType: "json",
                    success: function (data) {
                        $("#stationsList").empty();
                        $.each(data, function (i, item) {

                            $("#stationsList").append(`
                                     <tr>
                                         <td class="stationId ps-2">${item.stationId}</td>
                                         <td class="station">${item.stationName}</td>
                                         <td class="address1">${item.address1}</td>
                                         <td class="address2">${item.address2}</td>
                                         <td class="lati">${item.lat}</td>
                                         <td class="longi">${item.long}</td>
                                         <td class="dailyPassers">${item.dailyPassers}</td>
                                         <td class="text-center last-td-sticky">
                                             <span class="me-2 btnEdit cursor-pointer" >
                                                 <img src="/assets/img/icons/edit.svg" alt="img">
                                             </span>
                                             <span class="confirm-text btnDel cursor-pointer" >
                                                 <img src="/assets/img/icons/delete.svg" alt="img">
                                             </span>
                                         </td>
                                         <td class="stationImage d-none">${item.stationImage}</td>
                                     </tr>
                                    `)
                        });

                    },
                    error: function (data) {
                    }
                });
            }
            catch (err) {
                alert(err)
            }
        }


        $("#btnSave").click(function () {

            if (CheckValidation("AddPage") == false) {

                return false;
            }

            var formData = new FormData();

            var totalFiles = document.getElementById("userImg").files.length;
            for (var i = 0; i < totalFiles; i++) {
                var file = document.getElementById("userImg").files[i];
                formData.append("stationImage", file);
            }

            formData.append("id", $("#txtStationId").val());
            formData.append("stationName", $("#txtStationName").val());
            formData.append("address1", $("#txtAddress1").val());
            formData.append("address2", $("#txtAddress2").val());
            formData.append("lati", $("#txtLat").val());
            formData.append("longi", $("#txtLong").val());
            formData.append("dailyPassers", $("#txtDailyPassers").val());

            //CheckDuplicateEntry(NameMatch, LoopTableBodyId, TableDataNameMatchByClass, IgnoreValueId, IngoreValClassInTable)
            if (CheckDuplicateEntry($("#txtStationName").val().trim(), "#stationsList", ".station", $("#txtStationId").val(), ".stationId") == false) {
                toastr.info("Station Already Added.", "", { closeButton: !0, tapToDismiss: !1, ltl: o });
                $("#txtStationName").focus();
                return false;
            }

            try {
                $.ajax({
                    type: "POST",
                    contentType: "application/x-www-form-urlencoded; charset=UTF-8",
                    url: "/Admin/SaveStation/",
                    data: formData,
                    async: false,
                    dataType: "json",
                    contentType: false,
                    processData: false,
                    success: function (data) {
                        if (data != false) {
                            toastr.success("Save Successfully", "", { closeButton: !0, tapToDismiss: !1, ltl: o });
                            GetStationsList();
                            $("#txtStationId").val("");
                            $("#btnRefresh").click();
                        }
                        else {
                            toastr.error("Please Save Again", "", { closeButton: !0, tapToDismiss: !1, ltl: o });
                        }
                    },
                    error: function () {
                    }
                });
            }
            catch (err) {
                alert(err)
            }
        });

        $('body').on('click', ".btnDel", function () {

            var x = confirm("Are you sure you want to delete?");
            if (x == false) { return false; }

            var obj = {};
            obj.id = $(this).closest('tr').find(".stationId").text();
            obj.stationImage = $(this).closest('tr').find(".stationImage").text();


            try {
                $.ajax({
                    type: "POST",
                    contentType: "application/x-www-form-urlencoded; charset=UTF-8",
                    url: "/Admin/DelStation/",
                    data: obj,
                    async: false,
                    dataType: "json",
                    success: function (data) {

                        if (data == "InUse") {
                            toastr.success("Already In Use", "", { closeButton: !0, tapToDismiss: !1, ltl: o });
                            return false;
                        }

                        if (data != false) {
                            toastr.success("Deleted Successfully", "", { closeButton: !0, tapToDismiss: !1, ltl: o });
                            GetStationsList();
                            $("#txtStationId").val("");
                            $("#btnRefresh").click();
                        }
                        else {
                            toastr.error("Please Delete Again", "", { closeButton: !0, tapToDismiss: !1, ltl: o });
                        }
                    },
                    error: function () {
                    }
                });
            }
            catch (err) {
                alert(err)
            }
        });



        $("body").on('click', '.btnEdit', function () {
            debugger

            $(".activeForm").removeClass('disabled');

            var id = $(this).closest('tr').find('.stationId').text();
            GetScreens(id);
            var station = $(this).closest('tr').find('.station').text();
            var address1 = $(this).closest('tr').find('.address1').text();
            var address2 = $(this).closest('tr').find('.address2').text();
            var lati = $(this).closest('tr').find('.lati').text();
            var longi = $(this).closest('tr').find('.longi').text();
            var dailyPassers = $(this).closest('tr').find('.dailyPassers').text();

            $("#txtStationId").val(id);
            $("#txtStationName").val(station);
            $("#txtAddress1").val(address1);
            $("#txtAddress2").val(address2);
            $("#txtLat").val(lati);
            $("#txtLong").val(longi);
            $("#txtDailyPassers").val(dailyPassers);

            var userImg = $(this).closest('tr').find('.stationImage').text();
            var path = window.location.origin;
            $("#ImageUser").attr('src', path + "/" + userImg);
        @* $("#ScreenSelectImage").attr('src', path + "/" + userImg); *@
                stationimgview(path + "/" + userImg, id)
            $("#btnSave").show();
            $("#btnNew").hide();
            $("#btnSave").text('Update Station');

            $(".ListPage").hide();
            $(".AddPage").show();

        });




        function stationimgview(imageUrl, stationid) {

            var imageBounds = [[0, 0], [400, 600]];
            if (mapoverlay) {
                mapoverlay.eachLayer(function (layer) {
                    mapoverlay.removeLayer(layer);
                });
            } else {

                mapoverlay = L.map('stationPopup', { attributionControl: false, center: [200, 300], zoom: 1, maxBounds: imageBounds });
            }


            L.imageOverlay(imageUrl, imageBounds).addTo(mapoverlay);
            var svgElement = document.createElementNS("http://www.w3.org/2000/svg", "svg");

            svgElement.setAttribute('xmlns', "http://www.w3.org/2000/svg");
            svgElement.setAttribute('viewBox', "0 0 400 600");
            svgElement.setAttribute('onclick', "openNav()");
            svgElement.setAttribute('preserveAspectRatio', "none");
            svgElement.style.width = '100%';
            svgElement.style.height = '100%';

            var ButtonGroup = document.createElementNS("http://www.w3.org/2000/svg", "g");
            ButtonGroup.style.width = '100%';
            ButtonGroup.style.height = '100%';

            var arrowAnimations = [];
            $.ajax({
                type: "Get",
                contentType: "application/x-www-form-urlencoded; charset=UTF-8",
                url: '/Admin/GetScreens?stationid=' + stationid,
                async: false,
                dataType: "json",
                success: function (data) {
                    $.each(data, function (i, item) {
                        var idattr = item.StationId + '-' + item.ScreenId;

                        var Rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
                        Rect.setAttribute("x", item.XPosition1);
                        Rect.setAttribute("y", item.YPosition1);
                        Rect.setAttribute("width", item.width);
                        Rect.setAttribute("height", item.height);
                        Rect.setAttribute("fill", "yellow");
                        // Rect.classList.add("rect-bounce");
                        Rect.setAttribute("objectid", "");
                        Rect.setAttribute("stationid", item.StationId);
                        Rect.setAttribute("id", item.ScreenId);
                        Rect.setAttribute("screenName", item.ScreenName);
                        Rect.setAttribute("StationName", item.StationName);
                        Rect.setAttribute("Rate", item.Rate);
                        Rect.setAttribute("ImageUrl", imageUrl);
                        Rect.classList.add("add-to-cart-btn");
                        Rect.setAttribute("screenRect", item.ScreenId);





                        // Create an SVG foreignObject to embed the arrow icon
                        // Add text element to represent the arrow
                        var arrowText = document.createElementNS("http://www.w3.org/2000/svg", "text");
                        arrowText.setAttribute("x", item.XPosition); // Center the text horizontally
                        arrowText.setAttribute("y", item.YPosition); // Center the text vertically
                        arrowText.setAttribute("text-anchor", "middle");
                        arrowText.setAttribute("dominant-baseline", "middle");
                        arrowText.setAttribute("font-size", "50"); // Set font size
                        //  arrowText.setAttribute("fill", "white");



                        arrowText.setAttribute("fill", "red");

                        arrowText.classList.add("rect-bounce");
                        arrowText.setAttribute("objectid", "");
                        arrowText.setAttribute("stationid", item.StationId);
                        arrowText.setAttribute("id", item.ScreenId);
                        arrowText.setAttribute("screenName", item.ScreenName);
                        arrowText.setAttribute("StationName", item.StationName);
                        arrowText.setAttribute("Rate", item.Rate);
                        arrowText.setAttribute("ImageUrl", imageUrl);
                        arrowText.classList.add("add-to-cart-btn");

                        arrowText.setAttribute('onmousedown', "startDrag(evt)");



                        arrowText.setAttribute("arrowText", item.ScreenId);




                        arrowText.textContent = "↓";


                        ButtonGroup.appendChild(Rect);
                        ButtonGroup.appendChild(arrowText);







                    });





                },
                error: function (error) {
                    console.error('Error:', error);
                    console.error('Error:', error.statusCode);
                }
            });

            svgElement.appendChild(ButtonGroup);

            L.svgOverlay(svgElement, imageBounds).addTo(mapoverlay);







            // Show the modal

            // Wait for the modal to be fully shown before resizing the map
        @* $("#largeModal").on('shown.bs.modal', function () {
            mapoverlay.invalidateSize();
            }); *@



        }









        //============= Get Screens ==============\\


        function GetScreens(id) {
            debugger
            try {
                $.ajax({
                    url: '/Admin/GetScreenByStation',
                    method: 'GET',
                    dataType: 'json',
                    data: { stationId: id },
                    success: function (data) {

                        console.log(data);
                        var selectElement = $('#drpGetScreens');
                        selectElement.empty();
                        selectElement.append($('<option>').val(0).text('Select Screens'));

                        data.forEach(function (screen) {
                            var option = $('<option>').val(screen.ScreenId).text(screen.ScreenName);
                            selectElement.append(option);
                        });
                    },
                    error: function () {
                        console.log('Error fetching data from the server');
                    }
                });
            } catch (err) {
                console.log('An error occurred while making the AJAX request: ' + err);
            }
        }


        //====================== Buttons ========================\\

        $("#btnNew").click(function () {
            $(".activeForm").removeClass('disabled');

            $(this).hide();
            $("#btnSave").text('Save');
            $("#btnSave").show();
            $("#txtStationName").focus();
        });

        $("#btnRefresh").click(function () {

            var uId = $("#txtStationId").val();

            if (uId != 0) {
                $(".stationId").each(function () {
                    const userIdValue = $(this).text().trim();
                    if (userIdValue === uId) {
                        $(this).closest('tr').find('.btnEdit').click();
                        return false;
                    }
                });
            }
            else {

                $(".activeForm").addClass('disabled');

                $("#btnSave").hide();
                $("#btnNew").show();

                $("#txtStationId").val('');
                $("#txtStationName").val('');
                $("#txtAddress1").val('');
                $("#txtAddress2").val('');
                $("#txtLat").val('');
                $("#txtLong").val('');
                $("#txtRate").val('');
                $("#txtDailyPassers").val('');
                $("#ImageUser").attr('src', '');
                $("#userImg").val('');
            }
        });






        //===================== Save The Arrow Positions =======================\\

        function SaveScreenPosition() {
            debugger

            var arrowElements = document.querySelectorAll('#arrowDiv i[data-screenid]');

            // Loop through the arrow elements
            for (var i = 0; i < arrowElements.length; i++) {
                // Get the screenid attribute value for the current arrow element
                var screenid = arrowElements[i].getAttribute('data-screenid');
                console.log(screenid);
            }
        }



        //====================== Search ========================\\

        $(document).on('input', '#txtSearch', function () {
            var value = $(this).val().toLowerCase();
            $("#stationsList tr").filter(function () {
                $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
            });
        });

        //====================== User Image ========================\\
        $("body #userImg").change(function (event) {
            $("#ImageUser").attr('src', URL.createObjectURL(event.target.files[0]));
        });

        //====================== Word Convert ========================\\

        $('#convertWord').click(function () {
            $(".printCheckBox").trigger('change');

            HTMLtoWORD("tbl-print", "@ViewData["Title"]")
        });

        //====================== Grid Print Start ========================\\

        $('#pdfPrint').click(function () {
            $(".printCheckBox").trigger('change');

            var cloneTable = $("#tbl-print").clone();
            cloneTable.find('.d-none, .notPrintCol').remove();
            $(cloneTable).printThis();
        });

        //====================== Excel Convert ========================\\

        $("#convertExcel").click(function () {
            $(".printCheckBox").trigger('change');

            var cloneTable = $("#tbl-print").clone();
            cloneTable.find('.d-none, .notPrintCol').remove();

            TableToExcel.convert($(cloneTable)[0], {
                name: "@ViewData["Title"]" + ".xlsx",
                sheet: {
                    name: "@ViewData["Title"]"
                },

            });
        });

        //====================== Csv Convert ========================\\

        $("#convertCsv").click(function () {
            $(".printCheckBox").trigger('change');

            var cloneTable = $("#tbl-print").clone();
            cloneTable.find('.d-none, .notPrintCol').remove();

            var csvContent = "data:text/csv;charset=utf-8,";

            var headers = [];
            cloneTable.find("thead th").each(function () {
                headers.push($(this).text().trim());
            });

            csvContent += headers.join(",") + "\r\n";

            var tbody = cloneTable.find("tbody");

            tbody.find("tr").each(function () {
                var row = [];

                $(this).find("td").each(function () {
                    row.push($(this).text().trim());
                });

                csvContent += row.join(",") + "\r\n";
            });

            var encodedUri = encodeURI(csvContent);

            var link = document.createElement("a");
            link.setAttribute("href", encodedUri);
            link.setAttribute("download", "@ViewData["Title"]" + ".csv");

            document.body.appendChild(link);
            link.click();

            document.body.removeChild(link);
        });

        //================ Select Column By CheckBox ==================\\
        $(".printCheckBox").change(function () {
            const columnIndex = $(this).closest("th").index();
            const isChecked = $(this).is(":checked");
            const colClassToAdd = isChecked ? "PrintCol" : "notPrintCol";
            const colClassToRemove = isChecked ? "notPrintCol" : "PrintCol";

            $("#tbl-print tr").each(function () {
                const $cells = $(this).find(`th:eq(${columnIndex}), td:not(.d-none):eq(${columnIndex})`);
                $cells.removeClass(colClassToRemove).addClass(colClassToAdd);
            });
        });


    </script>
}